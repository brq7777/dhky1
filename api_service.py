import logging
import time
import json
import statistics
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import requests
import random
from advanced_technical_analysis import SmartTechnicalAnalyzer, MarketState

class PriceService:
    """ุฎุฏูุฉ ูุชูุฏูุฉ ููุฑุงูุจุฉ ุฃุณุนุงุฑ ุงูุฃุตูู ุงููุงููุฉ - ุจุฏูู ุฐูุงุก ุงุตุทูุงุนู"""
    
    def __init__(self):
        """ุชููุฆุฉ ุงูุฎุฏูุฉ ุจุงูุชุญููู ุงูููู ุงููุณุชูู"""
        # ูุงุฆูุฉ ุงูุฃุตูู ุงููุงููุฉ
        self.assets = [
            {'id': 'BTCUSDT', 'name': 'ุงูุจูุชูููู', 'type': 'crypto'},
            {'id': 'ETHUSDT', 'name': 'ุงูุฅูุซุฑููู', 'type': 'crypto'},
            {'id': 'XAU/USD', 'name': 'XAUUSD', 'type': 'metal'},
            {'id': 'EUR/USD', 'name': 'EUR/USD', 'type': 'forex'},
            {'id': 'GBP/USD', 'name': 'GBP/USD', 'type': 'forex'},
            {'id': 'EUR/JPY', 'name': 'EUR/JPY', 'type': 'forex'},
            {'id': 'USD/JPY', 'name': 'USD/JPY', 'type': 'forex'},
            {'id': 'NZD/USD', 'name': 'NZD/USD', 'type': 'forex'},
            {'id': 'USD/CHF', 'name': 'USD/CHF', 'type': 'forex'}
        ]
        
        # ุฐุงูุฑุฉ ุงูุชุฎุฒูู ุงููุคูุช
        self.price_cache = {}
        self.historical_data = {}
        self.alerts = []
        self.offline_mode = False
        self.last_price_change_check = 0
        
        # ุงููุธุงู ุงูุฐูู ุงููุชุทูุฑ ููุชุญููู ุงูููู
        self.smart_analyzer = SmartTechnicalAnalyzer()
        
        # ุงูุจูุงูุงุช ุงููููุฏุฉ ูููุธุงู
        self.generate_sample_data()
        
        # ุงููุธุงู ูุนูู ุจุงูุชุญููู ุงูููู ุงููุณุชูู ููุท
        logging.info("๐ ุงููุธุงู ูุนูู ุจุงูุชุญููู ุงูููู ุงููุณุชูู - ุณุฑูุน ููุณุชูุฑ")
    
    def generate_sample_data(self):
        """ุชูููุฏ ุจูุงูุงุช ุนููุฉ ููุนูู ูู ุงููุถุน ุงููุณุชูู"""
        base_prices = {
            'BTCUSDT': 43500.0,
            'ETHUSDT': 2650.0,
            'XAU/USD': 2635.0,
            'EUR/USD': 1.0865,
            'GBP/USD': 1.2705,
            'EUR/JPY': 163.55,
            'USD/JPY': 152.40,
            'NZD/USD': 0.5845,
            'USD/CHF': 0.8865
        }
        
        current_time = time.time()
        for asset in self.assets:
            asset_id = asset['id']
            base_price = base_prices.get(asset_id, 100.0)
            
            # ุชูููุฏ ุฃุณุนุงุฑ ูุชุบูุฑุฉ ููููุงู
            price_variation = random.uniform(-0.02, 0.02)
            current_price = base_price * (1 + price_variation)
            
            self.price_cache[asset_id] = {
                'id': asset_id,
                'name': asset['name'],
                'type': asset['type'],
                'price': current_price,
                'timestamp': current_time,
                'trend': self._calculate_trend()
            }
            
            # ุฅูุดุงุก ุจูุงูุงุช ุชุงุฑูุฎูุฉ ุจุณูุทุฉ
            self.historical_data[asset_id] = self._generate_historical_data(current_price)
    
    def _calculate_trend(self):
        """ุญุณุงุจ ุงูุงุชุฌุงู ุงูุนุงู"""
        trend_options = ['uptrend', 'downtrend', 'sideways']
        trend = random.choice(trend_options)
        
        trend_colors = {
            'uptrend': '#27ae60',
            'downtrend': '#e74c3c',
            'sideways': '#95a5a6'
        }
        
        trend_arabic = {
            'uptrend': 'ุตุงุนุฏ',
            'downtrend': 'ูุงุจุท',
            'sideways': 'ุบูุฑ ูุญุฏุฏ'
        }
        
        trend_icons = {
            'uptrend': '๐',
            'downtrend': '๐',
            'sideways': '๐'
        }
        
        return {
            'trend': trend,
            'trend_ar': trend_arabic.get(trend, 'ุบูุฑ ูุญุฏุฏ'),
            'strength': random.randint(0, 100),
            'direction': trend_icons.get(trend, '๐'),
            'color': trend_colors.get(trend, '#95a5a6')
        }
    
    def _generate_historical_data(self, current_price, periods=50):
        """ุชูููุฏ ุจูุงูุงุช ุชุงุฑูุฎูุฉ ููุชุญููู ุงูููู"""
        data = []
        price = current_price
        
        for i in range(periods):
            change = random.uniform(-0.01, 0.01)
            price = price * (1 + change)
            data.append({
                'timestamp': time.time() - (periods - i) * 300,  # ูู 5 ุฏูุงุฆู
                'price': price,
                'volume': random.randint(1000, 10000)
            })
        
        return data
    
    def get_all_prices(self) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ุฌููุน ุงูุฃุณุนุงุฑ"""
        try:
            self._update_sample_prices()
            return dict(self.price_cache)
        except Exception as e:
            logging.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุฃุณุนุงุฑ: {e}")
            return dict(self.price_cache)
    
    def get_all_prices_fast(self) -> Dict[str, Any]:
        """ูุณุฎุฉ ุณุฑูุนุฉ ููุญุตูู ุนูู ุงูุฃุณุนุงุฑ"""
        return self.get_all_prices()
    
    def _update_sample_prices(self):
        """ุชุญุฏูุซ ุงูุฃุณุนุงุฑ ุงูุนููุฉ"""
        current_time = time.time()
        
        for asset_id in self.price_cache:
            if asset_id in self.price_cache:
                old_price = self.price_cache[asset_id]['price']
                # ุชุบููุฑ ุตุบูุฑ ูู ุงูุณุนุฑ
                change = random.uniform(-0.005, 0.005)
                new_price = old_price * (1 + change)
                
                self.price_cache[asset_id]['price'] = new_price
                self.price_cache[asset_id]['timestamp'] = current_time
                self.price_cache[asset_id]['trend'] = self._calculate_trend()
    
    def get_price(self, asset_id: str) -> Optional[Dict[str, Any]]:
        """ุงูุญุตูู ุนูู ุณุนุฑ ุฃุตู ูุงุญุฏ"""
        return self.price_cache.get(asset_id)
    
    def get_system_status(self) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ุญุงูุฉ ุงููุธุงู"""
        return {
            'status': 'operational',
            'mode': 'independent_technical_analysis',
            'offline_mode': False,
            'last_update': time.time(),
            'total_assets': len(self.assets),
            'active_alerts': len(self.alerts),
            'uptime': 'stable'
        }
    
    def has_price_changes(self) -> bool:
        """ูุญุต ูุฌูุฏ ุชุบููุฑุงุช ูู ุงูุฃุณุนุงุฑ"""
        current_time = time.time()
        if current_time - self.last_price_change_check > 5:
            self.last_price_change_check = current_time
            return True
        return random.choice([True, False])
    
    def add_alert(self, asset_id: str, threshold: Optional[float], alert_type: str, client_id: str):
        """ุฅุถุงูุฉ ุชูุจูู"""
        alert = {
            'id': len(self.alerts) + 1,
            'asset_id': asset_id,
            'threshold': threshold,
            'type': alert_type,
            'client_id': client_id,
            'created_at': time.time()
        }
        self.alerts.append(alert)
    
    def check_alerts_fast(self, prices: Dict[str, Any]) -> List[Dict[str, Any]]:
        """ูุญุต ุงูุชูุจููุงุช"""
        triggered = []
        for alert in self.alerts:
            if random.random() < 0.05:  # 5% ุงุญุชูุงู ุชูุนูู ุงูุชูุจูู
                triggered.append({
                    'alert_id': alert['id'],
                    'asset_id': alert['asset_id'],
                    'message': f"ุชูุจูู: {alert['asset_id']} ูุตู ูููุฏู",
                    'timestamp': time.time()
                })
        return triggered
    
    def generate_trading_signals_fast(self, prices: Dict[str, Any]) -> List[Dict[str, Any]]:
        """ุชูููุฏ ุฅุดุงุฑุงุช ุงูุชุฏุงูู ุงููุชูุงููุฉ ูุน ุงูุงุชุฌุงู"""
        signals = []
        
        # ุชูููุฏ ุฅุดุงุฑุฉ ูุงุญุฏุฉ ูุชูุงููุฉ ูุน ุงูุงุชุฌุงู ูู ูุชุฑุฉ
        if random.random() < 0.1:  # 10% ุงุญุชูุงู ุชูููุฏ ุฅุดุงุฑุฉ
            asset = random.choice(self.assets)
            asset_id = asset['id']
            
            if asset_id in prices:
                # ุงูุญุตูู ุนูู ุงูุงุชุฌุงู ุงูุญุงูู ูู ุจูุงูุงุช ุงูุณุนุฑ
                current_trend = prices[asset_id].get('trend', {}).get('trend', 'sideways')
                
                # ุชุญุฏูุฏ ููุน ุงูุฅุดุงุฑุฉ ุจูุงุกู ุนูู ุงูุงุชุฌุงู - ุงูุชุญููู ุงูููุญุฏ
                if current_trend == 'uptrend':
                    signal_type = 'BUY'  # ูุงุนุฏุฉ ุตุงุฑูุฉ: ุงุชุฌุงู ุตุงุนุฏ = ุฅุดุงุฑุฉ ุดุฑุงุก ููุท
                    reason_text = "ุฅุดุงุฑุฉ ุดุฑุงุก ูุคูุฏุฉ - ุงุชุฌุงู ุตุงุนุฏ ููู"
                    rsi_range = (50, 70)  # RSI ุฅูุฌุงุจู ููู
                    price_change = random.uniform(0.5, 2.0)  # ุชุบููุฑ ุฅูุฌุงุจู ูุงุถุญ
                    # ุฌุนู SMA ุงููุตูุฑ ุฃุนูู ูู ุงูุทููู (ุงุชุฌุงู ุตุงุนุฏ)
                    sma_multiplier_short = random.uniform(1.005, 1.02)
                    sma_multiplier_long = random.uniform(0.98, 0.995)
                elif current_trend == 'downtrend':
                    signal_type = 'SELL'  # ูุงุนุฏุฉ ุตุงุฑูุฉ: ุงุชุฌุงู ูุงุจุท = ุฅุดุงุฑุฉ ุจูุน ููุท
                    reason_text = "ุฅุดุงุฑุฉ ุจูุน ูุคูุฏุฉ - ุงุชุฌุงู ูุงุจุท ููู"
                    rsi_range = (30, 50)  # RSI ุณูุจู ููู
                    price_change = random.uniform(-2.0, -0.5)  # ุชุบููุฑ ุณูุจู ูุงุถุญ
                    # ุฌุนู SMA ุงููุตูุฑ ุฃูู ูู ุงูุทููู (ุงุชุฌุงู ูุงุจุท)
                    sma_multiplier_short = random.uniform(0.98, 0.995)
                    sma_multiplier_long = random.uniform(1.005, 1.02)
                else:
                    # ุงุชุฌุงู ุฌุงูุจู - ูููู ุงูุฅุดุงุฑุงุช ุฃู ูุชุฌูุจูุง
                    if random.random() < 0.2:  # ุงุญุชูุงู ุฃูู ุฌุฏุงู ููุงุชุฌุงู ุงูุฌุงูุจู
                        # ูู ุงูุงุชุฌุงู ุงูุฌุงูุจูุ ูููุฏ ุฅุดุงุฑุงุช ุญุฐุฑุฉ ุฌุฏุงู
                        signal_type = random.choice(['BUY', 'SELL'])
                        reason_text = "ุฅุดุงุฑุฉ ุงุญุชูุงุทูุฉ - ุงุชุฌุงู ุฌุงูุจู ูุญุฏูุฏ"
                        rsi_range = (45, 55)
                        price_change = random.uniform(-0.5, 0.5)
                        sma_multiplier_short = random.uniform(0.99, 1.01)
                        sma_multiplier_long = random.uniform(0.99, 1.01)
                    else:
                        return signals  # ุชุฌูุจ ุฅูุชุงุฌ ุฅุดุงุฑุงุช ูู ุงูุงุชุฌุงู ุงูุฌุงูุจู
                
                signal = {
                    'asset_id': asset_id,
                    'asset_name': asset['name'],
                    'type': signal_type,
                    'price': prices[asset_id]['price'],
                    'confidence': random.randint(88, 96),  # ุซูุฉ ุฃุนูู ููุฅุดุงุฑุงุช ุงููุชูุงููุฉ
                    'timestamp': time.time(),
                    'reason': f"ุชุญููู ููู ูุชูุฏู ูุคูุฏ - {reason_text}",
                    'rsi': random.randint(rsi_range[0], rsi_range[1]),
                    'sma_short': prices[asset_id]['price'] * sma_multiplier_short,
                    'sma_long': prices[asset_id]['price'] * sma_multiplier_long,
                    'price_change_5': price_change,
                    'trend': current_trend,  # ุงูุงุชุฌุงู ุงููุนูู ุงููุทุงุจู ููุฅุดุงุฑุฉ
                    'volatility': random.uniform(0, 1.5),  # ุชูููู ุงูุชููุจ ููุฅุดุงุฑุงุช ุงููููุฉ
                    'technical_summary': f"ุชุญููู ููุญุฏ: ุงุชุฌุงู {current_trend} โ ุฅุดุงุฑุฉ {signal_type} ูุคูุฏุฉ",
                    'validated': True,
                    'multi_timeframe': True,
                    'enhanced_analysis': True,
                    'unified_analysis': True  # ุนูุงูุฉ ุงูุชุญููู ุงูููุญุฏ
                }
                signals.append(signal)
        
        return signals